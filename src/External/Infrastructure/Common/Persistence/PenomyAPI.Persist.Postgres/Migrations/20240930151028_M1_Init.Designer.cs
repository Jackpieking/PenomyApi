// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenomyAPI.Persist.Postgres.Data.DbContexts;

#nullable disable

namespace PenomyAPI.Persist.Postgres.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240930151028_M1_Init")]
    partial class M1_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("penomy_identity_roleclaim", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRoleClaim<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_identity_userclaim", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserClaim<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_identity_userlogin", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserLogin<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("penomy_identity_userrole", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("penomy_identity_usertoken", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserToken<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowComment")
                        .HasColumnType("boolean");

                    b.Property<long>("ArtworkOriginId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArtworkStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ArtworkType")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasSeries")
                        .HasColumnType("boolean");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsCreatedByAuthorizedUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTakenDown")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemporarilyRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("LastChapterUploadOrder")
                        .HasColumnType("integer");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PublicLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TemporarilyRemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("TemporarilyRemovedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkOriginId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemporarilyRemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("BugTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ResolveNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("ResolvedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ResolvedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(640)
                        .HasColumnType("character varying(640)");

                    b.Property<string>("UserDetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("BugTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ResolvedBy");

                    b.ToTable("penomy_artwork_bug_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReportAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BugReportId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BugReportId");

                    b.ToTable("penomy_artwork_bug_report_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("BugSeverity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_artwork_bug_type", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCategory", b =>
                {
                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("ArtworkId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("penomy_artwork_category", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowComment")
                        .HasColumnType("boolean");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsTemporarilyRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("PublicLevel")
                        .HasColumnType("integer");

                    b.Property<int>("PublishStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime>("TemporarilyRemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("TemporarilyRemovedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemporarilyRemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_artwork_chapter", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("penomy_artwork_chapter_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterMetaData", b =>
                {
                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasAdRevenueEnabled")
                        .HasColumnType("boolean");

                    b.Property<long>("TotalComments")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalFavorites")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalViews")
                        .HasColumnType("bigint");

                    b.HasKey("ChapterId");

                    b.ToTable("penomy_artwork_chapter_metadata", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReportProblemId");

                    b.ToTable("penomy_artwork_chapter_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReportAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterReportedId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterReportedId");

                    b.ToTable("penomy_artwork_chapter_report_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDirectlyCommented")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalChildComments")
                        .HasColumnType("integer");

                    b.Property<long>("TotalLikes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_artwork_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCommentParentChild", b =>
                {
                    b.Property<long>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChildCommentId")
                        .HasColumnType("bigint");

                    b.HasKey("ParentCommentId", "ChildCommentId");

                    b.HasIndex("ChildCommentId");

                    b.ToTable("penomy_artwork_comment_parent_child", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCommentReference", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_artwork_comment_reference", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkMetaData", b =>
                {
                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<double>("AverageStarRate")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasAdRevenueEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFanGroup")
                        .HasColumnType("boolean");

                    b.Property<long>("TotalComments")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalFavorites")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalFollowers")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalStarRates")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUsersRated")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalViews")
                        .HasColumnType("bigint");

                    b.HasKey("ArtworkId");

                    b.ToTable("penomy_artwork_metadata", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkOrigin", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_artwork_origin", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReportProblemId");

                    b.ToTable("penomy_artwork_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkReportedId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkReportedId");

                    b.ToTable("penomy_artwork_report_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportProblem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProblemSeverity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_artwork_report_problem", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkSeries", b =>
                {
                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("integer");

                    b.HasKey("SeriesId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_artwork_series", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlag", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolveNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("ResolvedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ResolvedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ViolationFlagTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ResolvedBy");

                    b.HasIndex("ViolationFlagTypeId");

                    b.ToTable("penomy_artwork_violation_flag", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlagType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_artwork_violation_flag_type", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(640)
                        .HasColumnType("character varying(640)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_category", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Series", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsTemporarilyRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("LastItemOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TemporarilyRemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("TemporarilyRemovedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemporarilyRemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_series", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserArtworkViewHistory", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArtworkType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "ArtworkId", "ChapterId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("ChapterId");

                    b.ToTable("penomy_user_artwork_view_history", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserFavoriteArtwork", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArtworkType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_user_favorite_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserFollowedArtwork", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArtworkType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_user_followed_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserLikeArtworkComment", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("CommentId", "UserId");

                    b.ToTable("penomy_user_like_artwork_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserManagedArtwork", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrantedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "ArtworkId", "RoleId", "GrantedBy");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("GrantedBy");

                    b.ToTable("penomy_user_managed_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserRatingArtwork", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<byte>("StarRates")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_user_rating_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserWatchingHistory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WatchedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("ChapterId");

                    b.ToTable("penomy_user_watching_history", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("ChatGroupType")
                        .HasColumnType("integer");

                    b.Property<string>("CoverPhotoUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_chat_group", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroupJoinRequest", b =>
                {
                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("ChatGroupId", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_chat_group_join_request", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroupMember", b =>
                {
                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("MemberId", "ChatGroupId");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("penomy_chat_group_member", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<long?>("MessageReceivedReplyRepliedMessageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MessageReceivedReplyRootChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<bool>("ReplyToAnotherMessage")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MessageReceivedReplyRootChatMessageId", "MessageReceivedReplyRepliedMessageId");

                    b.ToTable("penomy_chat_message", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("penomy_chat_message_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageLikeStatistic", b =>
                {
                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("ChatMessageId", "ValueId");

                    b.HasIndex("LikeValueId");

                    b.ToTable("penomy_chat_message_like_statistic", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageReply", b =>
                {
                    b.Property<long>("RootChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepliedMessageId")
                        .HasColumnType("bigint");

                    b.HasKey("RootChatMessageId", "RepliedMessageId");

                    b.ToTable("penomy_chat_message_reply", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.SocialGroupLinkedChatGroup", b =>
                {
                    b.Property<long>("SocialGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("SocialGroupId", "ChatGroupId");

                    b.HasIndex("ChatGroupId")
                        .IsUnique();

                    b.HasIndex("SocialGroupId")
                        .IsUnique();

                    b.ToTable("penomy_social_group_linked_chat_group", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.UserChatGroupActiveHistory", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ChatGroupId");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("penomy_user_chat_group_active_history", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.UserLikeChatMessage", b =>
                {
                    b.Property<long>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatMessageId", "UserId");

                    b.HasIndex("LikeValueId");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_like_chat_message", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BanType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_ban_type", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BugTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ResolveNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("ResolvedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ResolvedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserDetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("BugTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ResolvedBy");

                    b.ToTable("penomy_bug_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReportAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BugReportId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BugReportId");

                    b.ToTable("penomy_bug_report_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("BugSeverity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_bug_type", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<int>("ReportedCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalArtworks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFollowers")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("penomy_creator_profile", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserBan", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BanTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("BannedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BanTypeId");

                    b.HasIndex("BannedBy");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_ban", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserFollowedCreator", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "CreatorId");

                    b.HasIndex("CreatorId");

                    b.ToTable("penomy_user_followed_creator", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("RegisterAsCreator")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<int>("TotalFollowedCreators")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId");

                    b.ToTable("penomy_user_profile", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportedProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReportProblemId");

                    b.HasIndex("ReportedProfileId");

                    b.ToTable("penomy_user_profile_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReportProblem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProblemSeverity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_user_profile_report_problem", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.AdRevenueProgram", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("LastUpdateCode")
                        .HasColumnType("bigint");

                    b.Property<int>("MinTotalFollowersToApply")
                        .HasColumnType("integer");

                    b.Property<int>("MinTotalViewsToApply")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_ad_revenue_program", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.ArtworkAppliedAdRevenueProgram", b =>
                {
                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdRevenueProgramId")
                        .HasColumnType("bigint");

                    b.Property<int>("AppliedStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ProposedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ProposedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RejectedNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("ArtworkId", "AdRevenueProgramId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("ProposedBy");

                    b.ToTable("penomy_artwork_applied_ad_revenue_program", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.Bank", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<string>("Bin")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_bank", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWallet", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<decimal>("WalletAmount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("WalletStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.ToTable("penomy_creator_wallet", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransaction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TransactionMetaData")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("integer");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("penomy_creator_wallet_transaction", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransactionType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("penomy_creator_wallet_transaction_type", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationItem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowDonatorToSetPrice")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatorReceivedPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("penomy_donation_item", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationThank", b =>
                {
                    b.Property<long>("UserDonationTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("ThankNote")
                        .IsRequired()
                        .HasMaxLength(640)
                        .HasColumnType("character varying(640)");

                    b.HasKey("UserDonationTransactionId", "CreatorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserDonationTransactionId")
                        .IsUnique();

                    b.ToTable("penomy_donation_thank", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransaction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatorReceivedPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("DonationNote")
                        .HasColumnType("text");

                    b.Property<long>("DonatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasReceivedThankFromCreator")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalDonationAmount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("integer");

                    b.Property<long>("WalletTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DonatorId");

                    b.HasIndex("WalletTransactionId");

                    b.ToTable("penomy_user_donation_transaction", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransactionItem", b =>
                {
                    b.Property<long>("DonationTransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("DonationItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("integer");

                    b.HasKey("DonationTransactionId", "DonationItemId");

                    b.HasIndex("DonationItemId");

                    b.ToTable("penomy_user_donation_transaction_item", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("EmojiUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("ForDefaultDisplay")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_user_like_value", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPinnedPost", b =>
                {
                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("PinnedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PinnedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("GroupId", "PostId", "PinnedBy");

                    b.HasIndex("PinnedBy");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("penomy_group_pinned_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowComment")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("PostStatus")
                        .HasColumnType("integer");

                    b.Property<long>("TotalLikes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("penomy_group_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_group_post_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDirectlyCommented")
                        .HasColumnType("boolean");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalChildComments")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_group_post_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("penomy_group_post_comment_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentLikeStatistic", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "ValueId");

                    b.HasIndex("LikeValueId");

                    b.ToTable("penomy_group_post_comment_like_statistic", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentParentChild", b =>
                {
                    b.Property<long>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChildCommentId")
                        .HasColumnType("bigint");

                    b.HasKey("ParentCommentId", "ChildCommentId");

                    b.HasIndex("ChildCommentId");

                    b.ToTable("penomy_group_post_comment_parent_child", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostLikeStatistic", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "ValueId");

                    b.ToTable("penomy_group_post_like_statistic", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportProblemId");

                    b.ToTable("penomy_group_post_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.PostReportProblem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProblemSeverity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_post_report_problem", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverPhotoUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("RequireApprovedWhenPost")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_social_group", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupJoinRequest", b =>
                {
                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("GroupId", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_social_group_join_request", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupMember", b =>
                {
                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("GroupId", "MemberId", "RoleId");

                    b.HasIndex("MemberId");

                    b.ToTable("penomy_social_group_member", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupRelatedArtwork", b =>
                {
                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtworkId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("penomy_social_group_related_artwork", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("ReportProblemId");

                    b.ToTable("penomy_social_group_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReportProblem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProblemSeverity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_social_group_report_problem", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupViolationFlag", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("ResolveNote")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ResolvedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ResolvedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("ResolvedBy");

                    b.ToTable("penomy_social_group_violation_flag", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserFriend", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "FriendId");

                    b.ToTable("penomy_user_friend", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserFriendRequest", b =>
                {
                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("CreatedBy", "FriendId");

                    b.ToTable("penomy_user_friend_request", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeGroupPost", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("LikeValueId");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_like_group_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeGroupPostComment", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("LikeValueId");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_like_group_post_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeUserPost", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("LikeValueId");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_like_user_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeUserPostComment", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("LikeValueId");

                    b.HasIndex("UserId");

                    b.ToTable("penomy_user_like_user_post_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowComment")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("PublicLevel")
                        .HasColumnType("integer");

                    b.Property<long>("TotalLikes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("penomy_user_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_user_post_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDirectlyCommented")
                        .HasColumnType("boolean");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalChildComments")
                        .HasColumnType("integer");

                    b.Property<long>("TotalLikes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_user_post_comment", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentAttachedMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("penomy_user_post_comment_attached_media", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentLikeStatistic", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "ValueId");

                    b.ToTable("penomy_user_post_comment_like_statistics", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentParentChild", b =>
                {
                    b.Property<long>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChildCommentId")
                        .HasColumnType("bigint");

                    b.HasKey("ParentCommentId", "ChildCommentId");

                    b.HasIndex("ChildCommentId");

                    b.ToTable("penomy_user_post_comment_parent_child", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostLikeStatistic", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikeValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("PostId", "ValueId");

                    b.HasIndex("LikeValueId");

                    b.ToTable("penomy_user_post_like_statistics", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostReport", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportProblemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportProblemId");

                    b.ToTable("penomy_user_post_report", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserSavedGroupPost", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_user_saved_group_post", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserSavedUserPost", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("penomy_user_saved_user_posts", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.GrantedAuthorizedUser", b =>
                {
                    b.Property<long>("GrantedTo")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorizedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrantedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("GrantedTo", "AuthorizedUserId", "GrantedBy");

                    b.HasIndex("AuthorizedUserId");

                    b.HasIndex("GrantedBy");

                    b.ToTable("penomy_granted_authorized_user", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("penomy_system_account", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccountRole", b =>
                {
                    b.Property<long>("SystemAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("SystemAccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("penomy_system_account_role", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("penomy_system_role", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemOperation.MailServerStatus", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("LeftMailQuota")
                        .HasColumnType("integer");

                    b.Property<string>("MailDomain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ServerStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MailDomain")
                        .IsUnique();

                    b.ToTable("penomy_mail_server_status", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemOperation.RegisterWaitingList", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("LastMailSentAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime>("NextMailSentAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<int>("SendMailStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("penomy_register_waiting_list", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("penomy_identity_role", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("penomy_identity_user", (string)null);
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>");

                    b.HasDiscriminator().HasValue("PgRoleClaim");
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>");

                    b.HasDiscriminator().HasValue("PgUserClaim");
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>");

                    b.HasDiscriminator().HasValue("PgUserLogin");
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<long>");

                    b.HasDiscriminator().HasValue("PgUserRole");
                });

            modelBuilder.Entity("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<long>");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("PgUserToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("PenomyAPI.Persist.Postgres.Data.UserIdentity.PgUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkOrigin", "Origin")
                        .WithMany("Artworks")
                        .HasForeignKey("ArtworkOriginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedArtworks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Remover")
                        .WithMany("TemporarilyRemovedArtworks")
                        .HasForeignKey("TemporarilyRemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Updater")
                        .WithMany("UpdatedArtworks")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Origin");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("ArtworkBugReports")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugType", "BugType")
                        .WithMany("BugReports")
                        .HasForeignKey("BugTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedArtworkBugReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Resolver")
                        .WithMany("ResolvedArtworkBugReports")
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("BugType");

                    b.Navigation("Creator");

                    b.Navigation("Resolver");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReportAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReport", "BugReport")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BugReport");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugType", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedArtworkBugTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCategory", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("ArtworkCategories")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Category", "Category")
                        .WithMany("ArtworkCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "BelongedArtwork")
                        .WithMany("Chapters")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedChapters")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Remover")
                        .WithMany("TemporarilyRemovedChapters")
                        .HasForeignKey("TemporarilyRemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Updater")
                        .WithMany("UpdatedChapters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BelongedArtwork");

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", "ArtworkChapter")
                        .WithMany("ChapterMedias")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArtworkChapter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterMetaData", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", "ArtworkChapter")
                        .WithOne("ChapterMetaData")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterMetaData", "ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArtworkChapter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "ReportedArtwork")
                        .WithMany("ArtworkChapterReports")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", "ReportedChapter")
                        .WithMany("ChapterReports")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedChapterReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportProblem", "ReportedProblem")
                        .WithMany("ArtworkChapterReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ReportedArtwork");

                    b.Navigation("ReportedChapter");

                    b.Navigation("ReportedProblem");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReportAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReport", "ChapterReport")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("ChapterReportedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChapterReport");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedArtworkComments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCommentParentChild", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", "ChildComment")
                        .WithMany()
                        .HasForeignKey("ChildCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", "ParentComment")
                        .WithMany("ArtworkCommentParentChilds")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_penomy_artwork_comment_parent_child_penomy_artwork_comment~1");

                    b.Navigation("ChildComment");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkCommentReference", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "ReferencedArtwork")
                        .WithMany("CommentReferences")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", "Comment")
                        .WithMany("ArtworkCommentReferences")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReferencedArtwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkMetaData", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithOne("ArtworkMetaData")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkMetaData", "ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkOrigin", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedOrigins")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedOrigins")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "ReportedArtwork")
                        .WithMany("ArtworkReports")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedArtworkReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportProblem", "ReportedProblem")
                        .WithMany("ArtworkReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ReportedArtwork");

                    b.Navigation("ReportedProblem");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReport", "ArtworkReport")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("ArtworkReportedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArtworkReport");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportProblem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedArtworkReportProblems")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkSeries", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("ArtworkSeries")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Series", "Series")
                        .WithMany("ArtworkSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlag", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "ViolatedArtwork")
                        .WithMany("ViolationFlags")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedArtworkViolationFlags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Resolver")
                        .WithMany("ResolvedViolationFlags")
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlagType", "ViolationFlagType")
                        .WithMany("ArtworkViolationFlags")
                        .HasForeignKey("ViolationFlagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Resolver");

                    b.Navigation("ViolatedArtwork");

                    b.Navigation("ViolationFlagType");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlagType", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedArtworkViolationFlagTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedArtworkViolationFlagTypes")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Category", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedCategories")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedCategories")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Series", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedSeries")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Remover")
                        .WithMany("TemporarilyRemovedSeries")
                        .HasForeignKey("TemporarilyRemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Updater")
                        .WithMany("UpdatedSeries")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserArtworkViewHistory", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("UserArtworkViewHistories")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", "Chapter")
                        .WithMany("UserChapterViewHistories")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserFavoriteArtwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "FavoriteArtwork")
                        .WithMany("UserFavoriteArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FavoriteArtwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserFollowedArtwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "FollowedArtwork")
                        .WithMany("UserFollowedArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FollowedArtwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserManagedArtwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "ManagedArtwork")
                        .WithMany("UserManagedArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "ArtworkManager")
                        .WithMany("ManagedArtworks")
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "GrantedUser")
                        .WithMany("CollaboratedArtworks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArtworkManager");

                    b.Navigation("GrantedUser");

                    b.Navigation("ManagedArtwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserRatingArtwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "RatedArtwork")
                        .WithMany("UserRatingArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RatedArtwork");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.UserWatchingHistory", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("UserWatchingHistories")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedChatGroups")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroupJoinRequest", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupJoinRequests")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("ChatGroupJoinRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroupMember", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupMembers")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Member")
                        .WithMany("JoinedChatGroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", "ChatGroup")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageReply", "MessageReceivedReply")
                        .WithMany()
                        .HasForeignKey("MessageReceivedReplyRootChatMessageId", "MessageReceivedReplyRepliedMessageId");

                    b.Navigation("ChatGroup");

                    b.Navigation("MessageReceivedReply");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", "ChatMessage")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatMessage");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageLikeStatistic", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", "ChatMessage")
                        .WithMany("LikeStatistics")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.Navigation("ChatMessage");

                    b.Navigation("LikeValue");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessageReply", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", "RootChatMessage")
                        .WithMany("RepliedMessages")
                        .HasForeignKey("RootChatMessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RootChatMessage");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.SocialGroupLinkedChatGroup", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", "LinkedChatGroup")
                        .WithOne("SocialGroupLinkedChatGroup")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.Chat.SocialGroupLinkedChatGroup", "ChatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "LinkedSocialGroup")
                        .WithOne("SocialGroupLinkedChatGroup")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.Chat.SocialGroupLinkedChatGroup", "SocialGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LinkedChatGroup");

                    b.Navigation("LinkedSocialGroup");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.UserChatGroupActiveHistory", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupActiveHistories")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("ChatGroupActiveHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.UserLikeChatMessage", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", "LikedChatMessage")
                        .WithMany("UserLikes")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("UserLikeChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("LikedChatMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BanType", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedBanTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugType", "BugType")
                        .WithMany("BugReports")
                        .HasForeignKey("BugTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedBugReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Resolver")
                        .WithMany("ResolvedBugReports")
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BugType");

                    b.Navigation("Creator");

                    b.Navigation("Resolver");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReportAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReport", "BugReport")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BugReport");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugType", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedBugTypes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "ProfileOwner")
                        .WithOne("CreatorProfile")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProfileOwner");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserBan", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.BanType", "BanType")
                        .WithMany("UserBans")
                        .HasForeignKey("BanTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("UserBans")
                        .HasForeignKey("BannedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "BannedUser")
                        .WithMany("UserBans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BanType");

                    b.Navigation("BannedUser");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserFollowedCreator", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("Followers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("FollowedCreators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Reporter")
                        .WithMany("CreatedUserReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReportProblem", "ReportProblem")
                        .WithMany("UserProfileReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "ReportedUserProfile")
                        .WithMany("ReceivedUserReports")
                        .HasForeignKey("ReportedProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportProblem");

                    b.Navigation("ReportedUserProfile");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReportProblem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedUserProfileReportProblems")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.AdRevenueProgram", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedAdRevenuePrograms")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedAdRevenuePrograms")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.ArtworkAppliedAdRevenueProgram", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Approver")
                        .WithMany("ApprovedArtworkAppliedAdRevenuePrograms")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany()
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", "Proposer")
                        .WithMany("AppliedAdRevenuePrograms")
                        .HasForeignKey("ProposedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Artwork");

                    b.Navigation("Proposer");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.Bank", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedBanks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedBanks")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWallet", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.Bank", "Bank")
                        .WithMany("CreatorWallets")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", "Creator")
                        .WithOne("CreatorWallet")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWallet", "CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransaction", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransactionType", "TransactionType")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWallet", "CreatorWallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatorWallet");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransactionType", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedTransactionTypes")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationItem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedDonationItems")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Updater")
                        .WithMany("UpdatedDonationItems")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationThank", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", "Creator")
                        .WithMany("DonationThanks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransaction", "UserDonationTransaction")
                        .WithOne("DonationThank")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationThank", "UserDonationTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("UserDonationTransaction");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransaction", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", "Creator")
                        .WithMany("ReceivedUserDonations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Donator")
                        .WithMany("UserDonationTransactions")
                        .HasForeignKey("DonatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransaction", "WalletTransaction")
                        .WithMany()
                        .HasForeignKey("WalletTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Donator");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransactionItem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationItem", "DonationItem")
                        .WithMany("DonationTransactionItems")
                        .HasForeignKey("DonationItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransaction", "DonationTransaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("DonationTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonationItem");

                    b.Navigation("DonationTransaction");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedUserLikeValues")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPinnedPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("GroupPinnedPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "UserWhoPin")
                        .WithMany("GroupPinnedPosts")
                        .HasForeignKey("PinnedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "PinnedGroupPost")
                        .WithOne("GroupPinnedPost")
                        .HasForeignKey("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPinnedPost", "PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PinnedGroupPost");

                    b.Navigation("UserWhoPin");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Approver")
                        .WithMany("ApprovedGroupPosts")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedGroupPosts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedGroupPostComments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("GroupPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", "Comment")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentLikeStatistic", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", "GroupPostComment")
                        .WithMany("LikeStatistics")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany("GroupPostCommentLikeStatistics")
                        .HasForeignKey("LikeValueId");

                    b.Navigation("GroupPostComment");

                    b.Navigation("LikeValue");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostCommentParentChild", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", "ChildComment")
                        .WithMany()
                        .HasForeignKey("ChildCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", "ParentComment")
                        .WithMany("GroupPostCommentParentChilds")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_penomy_group_post_comment_parent_child_penomy_group_post_c~1");

                    b.Navigation("ChildComment");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostLikeStatistic", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany("GroupPostLikeStatistics")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("LikeStatistics")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupPost");

                    b.Navigation("LikeValue");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedGroupPostReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("GroupPostReports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.PostReportProblem", "ReportProblem")
                        .WithMany("GroupPostReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("GroupPost");

                    b.Navigation("ReportProblem");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.PostReportProblem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedPostReportProblems")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedSocialGroups")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupJoinRequest", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("SocialGroupJoinRequests")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("SocialGroupJoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupMember", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Member")
                        .WithMany("JoinedSocialGroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupRelatedArtwork", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", "Artwork")
                        .WithMany("SocialGroupRelatedArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("SocialGroupRelatedArtworks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Reporter")
                        .WithMany("CreatedSocialGroupReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany("ReceivedSocialGroupReports")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReportProblem", "ReportProblem")
                        .WithMany("SocialGroupReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("ReportProblem");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReportProblem", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedSocialGroupReportProblems")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupViolationFlag", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "Creator")
                        .WithMany("CreatedSocialGroupViolationFlags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Resolver")
                        .WithMany("ResolvedSocialGroupViolationFlags")
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Resolver");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeGroupPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("UserLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("UserLikeGroupPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupPost");

                    b.Navigation("LikeValue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeGroupPostComment", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", "LikedComment")
                        .WithMany("UserLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("UserLikeGroupPostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("LikedComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeUserPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("UserLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("UserLikeUserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("User");

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserLikeUserPostComment", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", "LikedComment")
                        .WithMany("UserLikes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany()
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("UserLikeUserPostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("LikedComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedUserPosts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedUserPostComments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentAttachedMedia", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", "Comment")
                        .WithMany("AttachedMedias")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentLikeStatistic", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany("UserPostCommentLikeStatistics")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", "UserPostComment")
                        .WithMany("LikeStatistics")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("UserPostComment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostCommentParentChild", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", "ChildComment")
                        .WithMany()
                        .HasForeignKey("ChildCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", "ParentComment")
                        .WithMany("UserPostCommentParentChilds")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_penomy_user_post_comment_parent_child_penomy_user_post_com~1");

                    b.Navigation("ChildComment");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostLikeStatistic", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", "LikeValue")
                        .WithMany("UserPostLikeStatistics")
                        .HasForeignKey("LikeValueId");

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("LikeStatistics")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikeValue");

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostReport", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "Creator")
                        .WithMany("CreatedUserPostReports")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("UserPostReports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.PostReportProblem", "ReportProblem")
                        .WithMany("UserPostReports")
                        .HasForeignKey("ReportProblemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ReportProblem");

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserSavedGroupPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", "GroupPost")
                        .WithMany("UserSavedGroupPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("SavedGroupPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserSavedUserPost", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", "UserPost")
                        .WithMany("UserSavedUserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "User")
                        .WithMany("SavedUserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.GrantedAuthorizedUser", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", "AuthorizedUserAccount")
                        .WithMany("GrantedTickets")
                        .HasForeignKey("AuthorizedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "GrantedSystemAccount")
                        .WithMany("GrantedAuthorizedUsers")
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "ReceivedSystemAccount")
                        .WithMany("ReceivedAuthorizedUsers")
                        .HasForeignKey("GrantedTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_penomy_granted_authorized_user_penomy_system_account_Grant~1");

                    b.Navigation("AuthorizedUserAccount");

                    b.Navigation("GrantedSystemAccount");

                    b.Navigation("ReceivedSystemAccount");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccountRole", b =>
                {
                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemRole", "SystemRole")
                        .WithMany("SystemAccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", "SystemAccount")
                        .WithMany("SystemAccountRoles")
                        .HasForeignKey("SystemAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SystemAccount");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Artwork", b =>
                {
                    b.Navigation("ArtworkBugReports");

                    b.Navigation("ArtworkCategories");

                    b.Navigation("ArtworkChapterReports");

                    b.Navigation("ArtworkMetaData");

                    b.Navigation("ArtworkReports");

                    b.Navigation("ArtworkSeries");

                    b.Navigation("Chapters");

                    b.Navigation("CommentReferences");

                    b.Navigation("SocialGroupRelatedArtworks");

                    b.Navigation("UserArtworkViewHistories");

                    b.Navigation("UserFavoriteArtworks");

                    b.Navigation("UserFollowedArtworks");

                    b.Navigation("UserManagedArtworks");

                    b.Navigation("UserRatingArtworks");

                    b.Navigation("UserWatchingHistories");

                    b.Navigation("ViolationFlags");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugReport", b =>
                {
                    b.Navigation("AttachedMedias");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkBugType", b =>
                {
                    b.Navigation("BugReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapter", b =>
                {
                    b.Navigation("ChapterMedias");

                    b.Navigation("ChapterMetaData");

                    b.Navigation("ChapterReports");

                    b.Navigation("UserChapterViewHistories");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkChapterReport", b =>
                {
                    b.Navigation("AttachedMedias");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkComment", b =>
                {
                    b.Navigation("ArtworkCommentParentChilds");

                    b.Navigation("ArtworkCommentReferences");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkOrigin", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReport", b =>
                {
                    b.Navigation("AttachedMedias");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkReportProblem", b =>
                {
                    b.Navigation("ArtworkChapterReports");

                    b.Navigation("ArtworkReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.ArtworkViolationFlagType", b =>
                {
                    b.Navigation("ArtworkViolationFlags");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Category", b =>
                {
                    b.Navigation("ArtworkCategories");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.ArtworkCreation.Series", b =>
                {
                    b.Navigation("ArtworkSeries");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatGroup", b =>
                {
                    b.Navigation("ChatGroupActiveHistories");

                    b.Navigation("ChatGroupJoinRequests");

                    b.Navigation("ChatGroupMembers");

                    b.Navigation("ChatMessages");

                    b.Navigation("SocialGroupLinkedChatGroup");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Chat.ChatMessage", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("LikeStatistics");

                    b.Navigation("RepliedMessages");

                    b.Navigation("UserLikes");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BanType", b =>
                {
                    b.Navigation("UserBans");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugReport", b =>
                {
                    b.Navigation("AttachedMedias");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.BugType", b =>
                {
                    b.Navigation("BugReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.CreatorProfile", b =>
                {
                    b.Navigation("AppliedAdRevenuePrograms");

                    b.Navigation("CreatorWallet");

                    b.Navigation("DonationThanks");

                    b.Navigation("ReceivedUserDonations");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfile", b =>
                {
                    b.Navigation("ApprovedGroupPosts");

                    b.Navigation("ChatGroupActiveHistories");

                    b.Navigation("ChatGroupJoinRequests");

                    b.Navigation("ChatMessages");

                    b.Navigation("CollaboratedArtworks");

                    b.Navigation("CreatedArtworkBugReports");

                    b.Navigation("CreatedArtworkComments");

                    b.Navigation("CreatedArtworkReports");

                    b.Navigation("CreatedArtworks");

                    b.Navigation("CreatedBugReports");

                    b.Navigation("CreatedChapterReports");

                    b.Navigation("CreatedChapters");

                    b.Navigation("CreatedChatGroups");

                    b.Navigation("CreatedGroupPostComments");

                    b.Navigation("CreatedGroupPostReports");

                    b.Navigation("CreatedGroupPosts");

                    b.Navigation("CreatedSeries");

                    b.Navigation("CreatedSocialGroupReports");

                    b.Navigation("CreatedSocialGroups");

                    b.Navigation("CreatedUserPostComments");

                    b.Navigation("CreatedUserPostReports");

                    b.Navigation("CreatedUserPosts");

                    b.Navigation("CreatedUserReports");

                    b.Navigation("CreatorProfile");

                    b.Navigation("FollowedCreators");

                    b.Navigation("Followers");

                    b.Navigation("GrantedTickets");

                    b.Navigation("GroupPinnedPosts");

                    b.Navigation("JoinedChatGroupMembers");

                    b.Navigation("JoinedSocialGroupMembers");

                    b.Navigation("ManagedArtworks");

                    b.Navigation("ReceivedUserReports");

                    b.Navigation("ResolvedSocialGroupViolationFlags");

                    b.Navigation("ResolvedViolationFlags");

                    b.Navigation("SavedGroupPosts");

                    b.Navigation("SavedUserPosts");

                    b.Navigation("SocialGroupJoinRequests");

                    b.Navigation("TemporarilyRemovedArtworks");

                    b.Navigation("TemporarilyRemovedChapters");

                    b.Navigation("TemporarilyRemovedSeries");

                    b.Navigation("UpdatedArtworks");

                    b.Navigation("UpdatedChapters");

                    b.Navigation("UpdatedSeries");

                    b.Navigation("UserBans");

                    b.Navigation("UserDonationTransactions");

                    b.Navigation("UserLikeChatMessages");

                    b.Navigation("UserLikeGroupPostComments");

                    b.Navigation("UserLikeGroupPosts");

                    b.Navigation("UserLikeUserPostComments");

                    b.Navigation("UserLikeUserPosts");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Generic.UserProfileReportProblem", b =>
                {
                    b.Navigation("UserProfileReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.Bank", b =>
                {
                    b.Navigation("CreatorWallets");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.CreatorWalletTransactionType", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.DonationItem", b =>
                {
                    b.Navigation("DonationTransactionItems");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.Monetization.UserDonationTransaction", b =>
                {
                    b.Navigation("DonationThank");

                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.Common.UserLikeValue", b =>
                {
                    b.Navigation("GroupPostCommentLikeStatistics");

                    b.Navigation("GroupPostLikeStatistics");

                    b.Navigation("UserPostCommentLikeStatistics");

                    b.Navigation("UserPostLikeStatistics");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPost", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("Comments");

                    b.Navigation("GroupPinnedPost");

                    b.Navigation("GroupPostReports");

                    b.Navigation("LikeStatistics");

                    b.Navigation("UserLikes");

                    b.Navigation("UserSavedGroupPosts");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.GroupPostComment", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("GroupPostCommentParentChilds");

                    b.Navigation("LikeStatistics");

                    b.Navigation("UserLikes");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.PostReportProblem", b =>
                {
                    b.Navigation("GroupPostReports");

                    b.Navigation("UserPostReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("GroupPinnedPosts");

                    b.Navigation("GroupPosts");

                    b.Navigation("ReceivedSocialGroupReports");

                    b.Navigation("SocialGroupJoinRequests");

                    b.Navigation("SocialGroupLinkedChatGroup");

                    b.Navigation("SocialGroupRelatedArtworks");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.SocialGroupReportProblem", b =>
                {
                    b.Navigation("SocialGroupReports");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPost", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("Comments");

                    b.Navigation("LikeStatistics");

                    b.Navigation("UserLikes");

                    b.Navigation("UserPostReports");

                    b.Navigation("UserSavedUserPosts");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SocialMedia.UserPostComment", b =>
                {
                    b.Navigation("AttachedMedias");

                    b.Navigation("LikeStatistics");

                    b.Navigation("UserLikes");

                    b.Navigation("UserPostCommentParentChilds");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemAccount", b =>
                {
                    b.Navigation("ApprovedArtworkAppliedAdRevenuePrograms");

                    b.Navigation("CreatedAdRevenuePrograms");

                    b.Navigation("CreatedArtworkBugTypes");

                    b.Navigation("CreatedArtworkReportProblems");

                    b.Navigation("CreatedArtworkViolationFlagTypes");

                    b.Navigation("CreatedArtworkViolationFlags");

                    b.Navigation("CreatedBanTypes");

                    b.Navigation("CreatedBanks");

                    b.Navigation("CreatedBugTypes");

                    b.Navigation("CreatedCategories");

                    b.Navigation("CreatedDonationItems");

                    b.Navigation("CreatedOrigins");

                    b.Navigation("CreatedPostReportProblems");

                    b.Navigation("CreatedSocialGroupReportProblems");

                    b.Navigation("CreatedSocialGroupViolationFlags");

                    b.Navigation("CreatedTransactionTypes");

                    b.Navigation("CreatedUserLikeValues");

                    b.Navigation("CreatedUserProfileReportProblems");

                    b.Navigation("GrantedAuthorizedUsers");

                    b.Navigation("ReceivedAuthorizedUsers");

                    b.Navigation("ResolvedArtworkBugReports");

                    b.Navigation("ResolvedBugReports");

                    b.Navigation("SystemAccountRoles");

                    b.Navigation("UpdatedAdRevenuePrograms");

                    b.Navigation("UpdatedArtworkViolationFlagTypes");

                    b.Navigation("UpdatedBanks");

                    b.Navigation("UpdatedCategories");

                    b.Navigation("UpdatedDonationItems");

                    b.Navigation("UpdatedOrigins");

                    b.Navigation("UserBans");
                });

            modelBuilder.Entity("PenomyAPI.Domain.RelationalDb.Entities.SystemManagement.SystemRole", b =>
                {
                    b.Navigation("SystemAccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
